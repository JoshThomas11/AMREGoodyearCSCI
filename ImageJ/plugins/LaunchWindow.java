import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/**
 * This class creates a frame that allows the user to open (or reopen)
 * various windows by clicking on buttons.
 * 
 * @author	Benn Snyder
 * @author	Josh Thomas
 * @version	0.2, 06/08/11
 */
class LaunchWindow extends JPanel implements ActionListener
{
	JButton cdfButton;
	JButton histButton;
	JButton	box3dButton;

	static JButton OKButton;

	private static JFrame frame;

	GraphWindow gw;
	ParticleBox pb;
	
	/**
	 * Constructor
	 * Sets up frame and initializes buttons.
	 * 
	 * @param gw The GraphWindow to launch if the user clicks the button
	 * @param pb The ParticleBox to launch if the user clicks the button
	 */
	public LaunchWindow(GraphWindow gw, ParticleBox pb)
	{
		// Applies a 3 row by 1 column grid layout to the window
		super(new GridLayout(3,1));

		// Creates the JFrame
		frame = new JFrame("Launch Windows");
		// Prevents the user from clicking the X on the window to close it
		frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);

		this.gw = gw;
		this.pb = pb;

		// First panel of components in the window (with components centered)
		JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
		// Label giving the user(s) instructions on how to proceed with selecting the relevant options
		JLabel instructs = new JLabel("If you need to relaunch a window, click the appropriate button.");
		// Adds the label to the panel
		topPanel.add(instructs);
		// Adds the panel to the window (first row)
		add(topPanel);

		// Second panel of components in the window (left-aligned)
		JPanel buttonPanel = new JPanel(new FlowLayout());
		cdfButton = new JButton("CDF Graph");
		histButton = new JButton("Histogram");
		box3dButton = new JButton("3-D Visualization");

		cdfButton.setMnemonic(KeyEvent.VK_O);
		histButton.setMnemonic(KeyEvent.VK_O);
		box3dButton.setMnemonic(KeyEvent.VK_O);

		cdfButton.setActionCommand("cdf");
		histButton.setActionCommand("hist");
		box3dButton.setActionCommand("box3d");

		// Adds an item listener to all buttons
		cdfButton.addActionListener(this);
		histButton.addActionListener(this);
		box3dButton.addActionListener(this);

		// Adds all buttons to the panel
		buttonPanel.add(cdfButton);
		buttonPanel.add(histButton);
		buttonPanel.add(box3dButton);

		// Adds the panel to the window
		add(buttonPanel);

		// Third panel of components in the window (right-aligned)
		JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		// Creates the OK button to close the window
		OKButton = new JButton("Close");
		// Sets the Key Event for the button
		OKButton.setMnemonic(KeyEvent.VK_O);
		// Sets the string associated with the button for comparison in actionPerformed()
		OKButton.setActionCommand("close");
		// Adds an action listener to the button
		OKButton.addActionListener(this);

		// Adds the button to the panel
		bottomPanel.add(OKButton);

		// Adds the panel to the window
		add(bottomPanel);

		// Makes the frame non-transparent
		setOpaque(true);
		// Sets the frame to be the content pane created by the constructor
		frame.setContentPane(this);
		// Sets the default button for the frame to be the OK button
		frame.getRootPane().setDefaultButton(OKButton);
	}

	/**
	 * Handles the action events generated by the buttons.
	 * 
	 * @param e The reference to the ActionEvent that the listener generates
	 */
	public void actionPerformed(ActionEvent e)
	{
		if (e.getActionCommand() == "cdf")
		{
			gw.start();
		}
		else if (e.getActionCommand() == "hist")
		{
			// LAUNCH HISTOGRAM HERE
			// Remember to add histogram window object as constructor parameter
		}
		else if (e.getActionCommand() == "box3d")
		{
			pb.run();
		}
		// If the user clicked the Close button, user is done and destroy window to free memory
		else if (e.getActionCommand() == "close")
		{
			frame.dispose();
		}
	}

	/**
	 * Packs the frame and makes it visible.
	 * Mostly for future compatibility
	 */
	public void start()
	{
		// Packs all of the components into the frame to prepare to make it visible
		frame.pack();
		// Sets the location of the frame in the center of the screen
		frame.setLocationRelativeTo(null);
		// Pops the frame up
		frame.setVisible(true);
	}
}
