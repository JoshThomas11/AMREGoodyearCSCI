// Package imports
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

/*
 * Ellipse Option
 * A JFrame window used to toggle options during the plugin's execution.
*/
/**
 * A JFrame window that is launched at the start of the execution of the main plugin.
 * The window provides checkboxes that toggle options in the main plugin.
 * The boolean variable finished determines when the window has been closed.
 *
 * @author Benn Snyder
 * @author Josh Thomas
 * @version 0.1, 06/29/11
 */
class EllipseOption extends JPanel implements ActionListener, ItemListener, ChangeListener
{
	// Boolean variables for each checkbox
	public boolean lightingCheck;
	// Keeps track of if the window has been closed
	public boolean finished;
	public int percentParticles = 100;

	// Swing objects
	// Checkboxes for each property
	JCheckBox lightingBox;
	protected JButton OKButton; // OK Button
	private JFrame frame; // Main JFrame for the window

	/**
	 * Default constructor for the class.
	 * Defines the window components and adds them to the window.
	 */
	public EllipseOption()
	{
		// Applies a BorderLayout to the frame
		super(new BorderLayout());

		// Creates the JFrame with the title of "New_Plugin Options"
		frame = new JFrame("Ellipse -> Cylinder Options");
		// Prevents the user from clicking the X on the window to close it
		frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
		// Frame cannot be resized
		frame.setResizable(false);

		// First panel of components in the window (with components centered)
		JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
		// Label giving the user(s) instructions on how to proceed with selecting the relevant options
		JLabel instructs = new JLabel("Select options for the 3-D cylinder visualization:");
		// Adds the label to the panel
		topPanel.add(instructs);
		// Adds the panel to the window (first row)
		add(topPanel, BorderLayout.NORTH);

		// Second panel of components in the window (left-aligned)
		//JPanel checkBoxPanel = new JPanel(new FlowLayout());
		JPanel checkBoxPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));

		// Creates the checkboxes for the options
		lightingBox = new JCheckBox("Toggle Lighting On");

		// Sets the Key Event for the checkboxes
		lightingBox.setMnemonic(KeyEvent.VK_T);

		// Sets the initial state of the checkboxes to be unchecked
		lightingBox.setSelected(false);

		// Adds an item listener to all checkboxes
		lightingBox.addItemListener(this);
		
		// Adds all checkboxes to the panel
		checkBoxPanel.add(lightingBox);

		// Adds the panel to the window
		add(checkBoxPanel, BorderLayout.CENTER);

		// Slider for number of cylinders
		JSlider slider = new JSlider(0, 100, percentParticles);
		slider.addChangeListener(this);
		slider.setMajorTickSpacing(10);
		slider.setMinorTickSpacing(5);
		slider.setPaintTicks(true);
		slider.setSnapToTicks(true);
		slider.setPaintLabels(true);

		JPanel slidePanel = new JPanel(new BorderLayout());
		JPanel labelPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
		JLabel partLabel = new JLabel("Percent of cylinders to display:");
		labelPanel.add(partLabel);
		slidePanel.add(labelPanel, BorderLayout.NORTH);
		slidePanel.add(slider, BorderLayout.CENTER);

		// Third panel of components in the window (right-aligned)
		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
		// Creates the OK button to close the window
		OKButton = new JButton("OK");
		// Sets the Key Event for the button
		OKButton.setMnemonic(KeyEvent.VK_O);
		// Sets the string associated with the button for comparison in actionPerformed()
		OKButton.setActionCommand("OK");
		// Adds an action listener to the button
		OKButton.addActionListener(this);
		OKButton.setSize(100,75);

		// Adds the button to the panel
		buttonPanel.add(OKButton);
		slidePanel.add(buttonPanel, BorderLayout.SOUTH);
		add(slidePanel, BorderLayout.SOUTH);

		// Makes the panel non-transparent
		setOpaque(true);
		// Sets the content pane of the frame to be this window
		frame.setContentPane(this);
		// Sets the default button for the frame to be the OK button
		frame.getRootPane().setDefaultButton(OKButton);
	}

	/**
	 * Handles item events generated by the checkbox objects.
	 *
	 * @param e The reference to the ItemEvent that the listener generates
	 */
	public void itemStateChanged(ItemEvent e)
	{
		// Grabs which object triggered the event
		Object box = e.getItemSelectable();
		// Sets the value of the checkbox that was checked to be true
		if (lightingBox == box)
		{
			lightingCheck = true;
		}
		// If, in fact, the checkbox was deselected, then set the value to false
		if(e.getStateChange() == ItemEvent.DESELECTED)
		{
			if (lightingBox == box)
			{
				lightingCheck = false;
			}
		}
	}

	public void stateChanged(ChangeEvent e)
	{
		JSlider source = (JSlider)e.getSource();
		if (!source.getValueIsAdjusting())
		{
			percentParticles = source.getValue();
		}
	}

	/**
	 * Handles the action events generated by the button.
	 * @param e The reference to the ActionEvent that the listener generates
	 */
	public void actionPerformed(ActionEvent e)
	{
		// If the user clicked the OK button, user is done and destroy window to free memory
		if ("OK".equals(e.getActionCommand()))
		{
			finished = true;
			frame.dispose();
		}
	}

	/**
	 * Packs the frame, sets the location of the window on the screen,
	 * and sets the window to be visible.
	 */
	private void setup()
	{
		// Packs all of the components into the frame to prepare to make it visible
		frame.pack();
		// Sets the location of the frame in the center of the screen
		frame.setLocationRelativeTo(null);
		// Pops the frame up
		frame.setVisible(true);
	}

	/**
	 * Driver method for the class. Invokes the setup method to generate the window.
	 */
	public void start()
	{
		// Runs the setup method to generate the window.
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				setup();
			}
		});
	}
}
